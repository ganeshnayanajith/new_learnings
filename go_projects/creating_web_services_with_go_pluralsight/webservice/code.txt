package main

import "net/http"

type fooHandler struct {
	Message string
}

func (f *fooHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte(f.Message))
}

func barHandler(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("bar called"))
}

func main() {
	http.Handle("/foo", &fooHandler{Message: "foo called"})
	http.HandleFunc("/bar", barHandler)
	http.ListenAndServe(":3000", nil)
}
-------------------------------------------
package main

import (
	"encoding/json"
	"fmt"
	"log"
)

type Product struct {
	ProductID      int    `json:"productId"`
	Manufacturer   string `json:"manufacturer"`
	Sku            string `json:"sku"`
	Upc            string `json:"upc"`
	PricePerUnit   string `json:"pricePerUnit"`
	QuantityOnHand int    `json:"quantityOnHand"`
	ProductName    string `json:"productName"`
}

func main() {
	product := &Product{
		ProductID:      123,
		Manufacturer:   "Bix Company",
		Sku:            "456iouKL",
		Upc:            "123456789123",
		PricePerUnit:   "250",
		QuantityOnHand: 30,
		ProductName:    "Gizzmoo",
	}

	productJSON, err := json.Marshal(product)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(string(productJSON))
}
-------------------------------------------
package main

import (
	"encoding/json"
	"fmt"
	"log"
)

type Product struct {
	ProductID      int    `json:"productId"`
	Manufacturer   string `json:"manufacturer"`
	Sku            string `json:"sku"`
	Upc            string `json:"upc"`
	PricePerUnit   string `json:"pricePerUnit"`
	QuantityOnHand int    `json:"quantityOnHand"`
	ProductName    string `json:"productName"`
}

func main() {
	productJSON := `{
		"productId":123,
		"manufacturer":"Bix Company",
		"sku":"456iouKL",
		"upc":"123456789123",
		"pricePerUnit":"250",
		"quantityOnHand":30,
		"productName":"Gizzmoo"
	 }`

	product := Product{}
	err := json.Unmarshal([]byte(productJSON), &product)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(product)
	fmt.Printf("json unmarshal product : %s", product.ProductName)
}
-------------------------------------------
-------------------------------------------

