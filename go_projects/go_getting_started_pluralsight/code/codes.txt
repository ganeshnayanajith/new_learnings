package main

import "fmt"

/* const (
	first  = iota + 6
	second = 2 << iota

	first = iota
	second
)

const (
	third = iota
	fourth
) */

func main() {

	fmt.Println("Program running..")

	/* slice := []int{0, 1, 2, 3, 4, 5, 6}

	newSlice := append(slice[:4], slice[5:]...)

	fmt.Println(newSlice) */


	/* if 5 != 5 {
		println("same")
	} else {
		println("not same")
	} */

	/* if 5 == 5 {
		println("same")
	}

	if 5 != 6 {
		println("not same")
	} */

	/* println("starting web server")
	panic("something went wrong")
	println("web server started") */

	/* wellKnownPorts := map[string]int{"http": 80, "https": 443}
	for _, v := range wellKnownPorts {
		println(v)
	} */

	/* wellKnownPorts := map[string]int{"http": 80, "https": 443}
	for k := range wellKnownPorts {
		println(k)
	} */

	/* wellKnownPorts := map[string]int{"http": 80, "https": 443}
	for k, v := range wellKnownPorts {
		println(k, v)
	} */

	/* slice := []int{1, 2, 3}
	for i := 0; i < len(slice); i++ {
		println(slice[i])
	} */

	/* slice := []int{1, 2, 3}
	for i, v := range slice {
		println(i, v)
	} */

	/* var i int
	for ; ; {
		if i == 5 {
			break
		}
		println(i)
		i++
	} */

	/* var i int
	for {
		if i == 5 {
			break
		}
		println(i)
		i++
	} */

	/* for i := 0; i < 5; i++ {
		println(i)
	} */

	/* var i int

	for ; i < 5; i++ {
		println(i)
	} */

	/* for i < 5 {
		println(i)
		i++
		if i == 3 {
			continue
		}
		println("continuing")

	} */

	/* for i < 5 {
		println(i)
		i++
		if i == 3 {
			break
		}
	} */

	/* for i < 5 {
		println(i)
		i++
	} */

	/* fmt.Println("Program running..") */

	/* port := 3000
	_, err := startWebServer(port, 2)
	fmt.Println(err) */
	/* port, err := startWebServer(port, 2)
	fmt.Println(port, err) */
	/* err := startWebServer(port, 2)
	fmt.Println(err) */
	/* isStarted := startWebServer(port, 2)
	fmt.Println(isStarted) */
	/* startWebServer(port, 2) */
	/* startWebServer(port) */

	/* u := models.User{
		ID:        2,
		FirstName: "Ganesh",
		LastName:  "Nayanajith",
	}

	fmt.Println(u) */



	/* func startWebServer(port, noOfRetries int) (int, error) {
	fmt.Println("Server started on port : ", port)
	fmt.Println("Number of retries : ", noOfRetries)
	return port, nil
	} */

	/* func startWebServer(port, noOfRetries int) error {
		fmt.Println("Server started on port : ", port)
		fmt.Println("Number of retries : ", noOfRetries)
		return errors.New("something went wrong")
	} */

	/* func startWebServer(port, noOfRetries int) error {
		fmt.Println("Server started on port : ", port)
		fmt.Println("Number of retries : ", noOfRetries)
		return nil
	} */

	/* func startWebServer(port, noOfRetries int) bool {
		fmt.Println("Server started on port : ", port)
		fmt.Println("Number of retries : ", noOfRetries)
		return true
	} */

	/* func startWebServer(port, noOfRetries int) {
		fmt.Println("Server started on port : ", port)
		fmt.Println("Number of retries : ", noOfRetries)
	} */

	/* func startWebServer(port int) {
		fmt.Println("Server started on port : ", port)
	} */


	/* type user struct {
		ID        int
		FirstName string
		LastName  string
	}

	var u user
	fmt.Println(u)

	u.ID = 1
	u.FirstName = "Ganesh"
	u.LastName = "Nayanajith"

	fmt.Println(u)
	fmt.Println(u.FirstName)

	// u2 := user{ID: 2, FirstName: "Nilki", LastName: "Nawanjana"}
	u2 := user{
		ID:        2,
		FirstName: "Nilki",
		LastName:  "Nawanjana",
	}
	fmt.Println(u2)
	fmt.Println(u2.FirstName) */

	/* m := map[string]int{"foo": 42}
	fmt.Println(m)
	fmt.Println(m["foo"])

	m["foo"] = 27
	fmt.Println(m["foo"])

	delete(m, "foo")
	fmt.Println(m) */

	/* slice := []int{1, 2, 3}
	fmt.Println(slice)

	slice = append(slice, 4)
	fmt.Println(slice)

	slice = append(slice, 5, 6, 7)
	fmt.Println(slice)

	slice2 := slice[1:]
	fmt.Println(slice2)

	slice3 := slice[:2]
	fmt.Println(slice3)

	slice4 := slice[1:2]
	fmt.Println(slice4) */

	/* arr := [3]int{1, 2, 3}
	slice := arr[:]
	fmt.Println(arr, slice)

	arr[1] = 42
	slice[2] = 27
	fmt.Println(arr, slice) */

	/* arr := [3]int{1, 2, 3}
	fmt.Println(arr) */

	/* var arr [3]int
	arr[0] = 1
	arr[1] = 2
	arr[2] = 3

	fmt.Println(arr)
	fmt.Println(arr[0]) */

	/* fmt.Println(first, second, third, fourth) */

	/* const c int = 3
	fmt.Println(c + 3)
	fmt.Println(float32(c) + 1.2) */

	/* const c int = 3
	fmt.Println(c + 3)
	fmt.Println(c + 1.2) */

	/* const c = 3
	fmt.Println(c + 3)
	fmt.Println(c + 1.2) */

	/* const pi = 3.1415
	fmt.Println(pi)
	// pi = 2.5 */

	/* firstName := "Ganesh"
	fmt.Println(firstName)

	ptr := &firstName
	fmt.Println(ptr, *ptr)

	firstName = "Nayanajith"
	fmt.Println(ptr, *ptr) */

	/* firstName := "Ganesh"
	fmt.Println(firstName)

	ptr := &firstName
	fmt.Println(ptr, *ptr) */

	/* var firstName *string = new(string)
	*firstName = "Ganesh"
	fmt.Println(firstName)
	fmt.Println(*firstName) */

	/* var i int
	i = 42
	fmt.Println(i)

	var f float32 = 3.14
	fmt.Println(f)

	firstName := "Ganesh"
	fmt.Println(firstName)

	b := true
	fmt.Println(b)

	c := complex(3, 4)
	fmt.Println(c)

	r, im := real(c), imag(c)
	fmt.Println(r, im) */

}
